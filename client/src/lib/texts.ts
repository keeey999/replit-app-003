// Runic text generator for transmutation circles
export function drawRunicText(
  ctx: CanvasRenderingContext2D,
  centerX: number,
  centerY: number,
  radius: number,
  style: string,
  color: string
): void {
  ctx.fillStyle = color;
  
  let text = "";
  
  // Choose text based on style
  switch (style) {
    case "classic":
      text = "EQUIVALENT EXCHANGE ‚Ä¢ HUMANKIND CANNOT GAIN ANYTHING WITHOUT GIVING SOMETHING IN RETURN ‚Ä¢";
      break;
    case "elemental":
      text = "EARTH ‚Ä¢ AIR ‚Ä¢ FIRE ‚Ä¢ WATER ‚Ä¢ SPIRIT ‚Ä¢ MATTER ‚Ä¢ ENERGY ‚Ä¢ TRANSFORMATION ‚Ä¢ BALANCE ‚Ä¢";
      break;
    case "runic":
      text = "ANSUZ ‚Ä¢ URUZ ‚Ä¢ THURISAZ ‚Ä¢ KENAZ ‚Ä¢ RAIDO ‚Ä¢ GEBO ‚Ä¢ SOWILO ‚Ä¢ HAGALAZ ‚Ä¢ TIWAZ ‚Ä¢ BERKANA ‚Ä¢ ALGIZ ‚Ä¢";
      break;
    case "celestial":
      text = "SUN ‚Ä¢ MOON ‚Ä¢ MERCURY ‚Ä¢ VENUS ‚Ä¢ MARS ‚Ä¢ JUPITER ‚Ä¢ SATURN ‚Ä¢ CELESTIAL ORDER ‚Ä¢ COSMIC BALANCE ‚Ä¢";
      break;
    case "modern":
      text = "MATTER ‚Ä¢ ENERGY ‚Ä¢ TIME ‚Ä¢ SPACE ‚Ä¢ ENTROPY ‚Ä¢ ORDER ‚Ä¢ CHAOS ‚Ä¢ CREATION ‚Ä¢ DESTRUCTION ‚Ä¢ UNITY ‚Ä¢";
      break;
    default:
      text = "EQUIVALENT EXCHANGE ‚Ä¢ HUMANKIND CANNOT GAIN ANYTHING WITHOUT GIVING SOMETHING IN RETURN ‚Ä¢";
  }
  
  // Calculate font size based on radius
  const fontSize = Math.floor(radius * 0.05);
  
  // Draw text along the outer circle
  drawTextAlongCircle(
    ctx,
    text,
    centerX,
    centerY,
    radius * 0.9, // Text radius
    fontSize,
    "Cinzel, serif"
  );
  
  // Add inner text circle for more complex patterns
  if (style === "runic" || style === "celestial") {
    // Use Japanese text for runic style
    const innerText = style === "runic"
      ? "ÂÆàË≠∑„ÅÆÂç∞ ‚Ä¢ Âäõ„ÅÆÊ∫ê ‚Ä¢ ÂâµÈÄ†„ÅÆÂäõ ‚Ä¢ Â§âÈù©„ÅÆÁêÜ ‚Ä¢ ÂèçÂøú„ÅÆÁí∞ ‚Ä¢ Á≠â‰æ°‰∫§Êèõ ‚Ä¢"
      : "AS ABOVE ‚Ä¢ SO BELOW ‚Ä¢ THE MACROCOSM ‚Ä¢ THE MICROCOSM ‚Ä¢ HARMONY ‚Ä¢ BALANCE ‚Ä¢";
    
    drawTextAlongCircle(
      ctx,
      innerText,
      centerX,
      centerY,
      radius * 0.45, // Inner text radius
      fontSize * 0.8,
      style === "runic" ? "'Noto Sans JP', sans-serif" : "Cinzel, serif"
    );
  }
}

// Function to draw text along a circular path
function drawTextAlongCircle(
  ctx: CanvasRenderingContext2D,
  text: string,
  centerX: number,
  centerY: number,
  radius: number,
  fontSize: number,
  fontFamily: string
): void {
  ctx.font = `${fontSize}px ${fontFamily}`;
  ctx.textAlign = "center";
  ctx.textBaseline = "middle";
  
  const charCount = text.length;
  const anglePerChar = (Math.PI * 2) / charCount;
  
  for (let i = 0; i < charCount; i++) {
    const char = text[i];
    const angle = i * anglePerChar - Math.PI / 2; // Start at top
    
    ctx.save();
    ctx.translate(
      centerX + radius * Math.cos(angle),
      centerY + radius * Math.sin(angle)
    );
    ctx.rotate(angle + Math.PI / 2); // Rotate text to follow circle
    ctx.fillText(char, 0, 0);
    ctx.restore();
  }
}

// Generate random pseudo-runic text
export function generateRunicText(length: number): string {
  const runes = [
    "·ö†", "·ö¢", "·ö¶", "·ö®", "·ö±", "·ö≤", "·ö∑", "·öπ", "·ö∫", "·öæ",
    "·õÅ", "·õÉ", "·õá", "·õà", "·õâ", "·õä", "·õè", "·õí", "·õñ", "·õó",
    "·õö", "·õú", "·õû", "·õü"
  ];
  
  const alchemicalCharacters = [
    "üúÄ", "üúÅ", "üúÇ", "üúÉ", "üúÑ", "üúÖ", "üúÜ", "üúá", "üúà", "üúâ",
    "üúä", "üúã", "üúå", "üúç", "üúé", "üúè", "üúê", "üúë", "üúí", "üúì",
    "üúî", "üúï", "üúñ", "üúó", "üúò", "üúô", "üúö", "üúõ", "üúú", "üúù",
    "üúû", "üúü", "üú†", "üú°", "üú¢", "üú£", "üú§", "üú•", "üú¶", "üúß",
    "üú®", "üú©", "üú™", "üú´", "üú¨", "üú≠", "üúÆ", "üúØ", "üú∞", "üú±",
    "üú≤", "üú≥", "üú¥", "üúµ", "üú∂", "üú∑", "üú∏", "üúπ", "üú∫", "üúª",
    "üúº", "üúΩ", "üúæ", "üúø"
  ];
  
  // Combine both character sets
  const allChars = [...runes, ...alchemicalCharacters];
  
  let result = "";
  for (let i = 0; i < length; i++) {
    const randomIndex = Math.floor(Math.random() * allChars.length);
    result += allChars[randomIndex];
  }
  
  return result;
}
